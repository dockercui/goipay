// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type CoinType string

const (
	CoinTypeXMR        CoinType = "XMR"
	CoinTypeBTC        CoinType = "BTC"
	CoinTypeLTC        CoinType = "LTC"
	CoinTypeETH        CoinType = "ETH"
	CoinTypeTON        CoinType = "TON"
	CoinTypeUSDTERC20  CoinType = "USDT_ERC20"
	CoinTypeUSDCERC20  CoinType = "USDC_ERC20"
	CoinTypeDAIERC20   CoinType = "DAI_ERC20"
	CoinTypeWBTCERC20  CoinType = "WBTC_ERC20"
	CoinTypeUNIERC20   CoinType = "UNI_ERC20"
	CoinTypeLINKERC20  CoinType = "LINK_ERC20"
	CoinTypeAAVEERC20  CoinType = "AAVE_ERC20"
	CoinTypeCRVERC20   CoinType = "CRV_ERC20"
	CoinTypeMATICERC20 CoinType = "MATIC_ERC20"
	CoinTypeSHIBERC20  CoinType = "SHIB_ERC20"
	CoinTypeBNBERC20   CoinType = "BNB_ERC20"
	CoinTypeATOMERC20  CoinType = "ATOM_ERC20"
	CoinTypeARBERC20   CoinType = "ARB_ERC20"
)

func (e *CoinType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CoinType(s)
	case string:
		*e = CoinType(s)
	default:
		return fmt.Errorf("unsupported scan type for CoinType: %T", src)
	}
	return nil
}

type NullCoinType struct {
	CoinType CoinType
	Valid    bool // Valid is true if CoinType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCoinType) Scan(value interface{}) error {
	if value == nil {
		ns.CoinType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CoinType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCoinType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CoinType), nil
}

type InvoiceStatusType string

const (
	InvoiceStatusTypePENDING        InvoiceStatusType = "PENDING"
	InvoiceStatusTypePENDINGMEMPOOL InvoiceStatusType = "PENDING_MEMPOOL"
	InvoiceStatusTypeEXPIRED        InvoiceStatusType = "EXPIRED"
	InvoiceStatusTypeCONFIRMED      InvoiceStatusType = "CONFIRMED"
)

func (e *InvoiceStatusType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InvoiceStatusType(s)
	case string:
		*e = InvoiceStatusType(s)
	default:
		return fmt.Errorf("unsupported scan type for InvoiceStatusType: %T", src)
	}
	return nil
}

type NullInvoiceStatusType struct {
	InvoiceStatusType InvoiceStatusType
	Valid             bool // Valid is true if InvoiceStatusType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInvoiceStatusType) Scan(value interface{}) error {
	if value == nil {
		ns.InvoiceStatusType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InvoiceStatusType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInvoiceStatusType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InvoiceStatusType), nil
}

type BtcCryptoDatum struct {
	ID             pgtype.UUID
	MasterPubKey   string
	LastMajorIndex int32
	LastMinorIndex int32
}

type CryptoAddress struct {
	ID         pgtype.UUID
	Address    string
	Coin       CoinType
	IsOccupied bool
	UserID     pgtype.UUID
}

type CryptoCache struct {
	Coin                  CoinType
	LastSyncedBlockHeight pgtype.Int8
	SyncedTimestamp       pgtype.Timestamptz
}

type CryptoDatum struct {
	UserID pgtype.UUID
	XmrID  pgtype.UUID
	BtcID  pgtype.UUID
	LtcID  pgtype.UUID
	EthID  pgtype.UUID
}

type EthCryptoDatum struct {
	ID             pgtype.UUID
	MasterPubKey   string
	LastMajorIndex int32
	LastMinorIndex int32
}

type Invoice struct {
	ID                    pgtype.UUID
	CryptoAddress         string
	Coin                  CoinType
	RequiredAmount        float64
	ActualAmount          pgtype.Float8
	ConfirmationsRequired int16
	CreatedAt             pgtype.Timestamptz
	ConfirmedAt           pgtype.Timestamptz
	Status                InvoiceStatusType
	ExpiresAt             pgtype.Timestamptz
	TxID                  pgtype.Text
	UserID                pgtype.UUID
}

type LtcCryptoDatum struct {
	ID             pgtype.UUID
	MasterPubKey   string
	LastMajorIndex int32
	LastMinorIndex int32
}

type User struct {
	ID pgtype.UUID
}

type XmrCryptoDatum struct {
	ID             pgtype.UUID
	PrivViewKey    string
	PubSpendKey    string
	LastMajorIndex int32
	LastMinorIndex int32
}
