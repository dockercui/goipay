// Code generated by mockery v2.50.4. DO NOT EDIT.

package listener

import mock "github.com/stretchr/testify/mock"

// MockDaemonRpcClientExecutor is an autogenerated mock type for the DaemonRpcClientExecutor type
type MockDaemonRpcClientExecutor[T SharedTx, B SharedBlock] struct {
	mock.Mock
}

// LastSyncedBlockHeight provides a mock function with no fields
func (_m *MockDaemonRpcClientExecutor[T, B]) LastSyncedBlockHeight() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastSyncedBlockHeight")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// NewBlockChan provides a mock function with no fields
func (_m *MockDaemonRpcClientExecutor[T, B]) NewBlockChan() <-chan B {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewBlockChan")
	}

	var r0 <-chan B
	if rf, ok := ret.Get(0).(func() <-chan B); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan B)
		}
	}

	return r0
}

// NewTxPoolChan provides a mock function with no fields
func (_m *MockDaemonRpcClientExecutor[T, B]) NewTxPoolChan() <-chan T {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewTxPoolChan")
	}

	var r0 <-chan T
	if rf, ok := ret.Get(0).(func() <-chan T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan T)
		}
	}

	return r0
}

// Start provides a mock function with given fields: startBlock
func (_m *MockDaemonRpcClientExecutor[T, B]) Start(startBlock uint64) {
	_m.Called(startBlock)
}

// Stop provides a mock function with no fields
func (_m *MockDaemonRpcClientExecutor[T, B]) Stop() {
	_m.Called()
}

// NewMockDaemonRpcClientExecutor creates a new instance of MockDaemonRpcClientExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDaemonRpcClientExecutor[T SharedTx, B SharedBlock](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDaemonRpcClientExecutor[T, B] {
	mock := &MockDaemonRpcClientExecutor[T, B]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
