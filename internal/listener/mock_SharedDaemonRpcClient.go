// Code generated by mockery v2.50.4. DO NOT EDIT.

package listener

import (
	db "github.com/chekist32/goipay/internal/db"
	mock "github.com/stretchr/testify/mock"
)

// MockSharedDaemonRpcClient is an autogenerated mock type for the SharedDaemonRpcClient type
type MockSharedDaemonRpcClient[T SharedTx, B SharedBlock] struct {
	mock.Mock
}

// GetBlockByHeight provides a mock function with given fields: height
func (_m *MockSharedDaemonRpcClient[T, B]) GetBlockByHeight(height uint64) (B, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByHeight")
	}

	var r0 B
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (B, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) B); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(B)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoinType provides a mock function with no fields
func (_m *MockSharedDaemonRpcClient[T, B]) GetCoinType() db.CoinType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCoinType")
	}

	var r0 db.CoinType
	if rf, ok := ret.Get(0).(func() db.CoinType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(db.CoinType)
	}

	return r0
}

// GetLastBlockHeight provides a mock function with no fields
func (_m *MockSharedDaemonRpcClient[T, B]) GetLastBlockHeight() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastBlockHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkType provides a mock function with no fields
func (_m *MockSharedDaemonRpcClient[T, B]) GetNetworkType() (NetworkType, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkType")
	}

	var r0 NetworkType
	var r1 error
	if rf, ok := ret.Get(0).(func() (NetworkType, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() NetworkType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(NetworkType)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionPool provides a mock function with no fields
func (_m *MockSharedDaemonRpcClient[T, B]) GetTransactionPool() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionPool")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactions provides a mock function with given fields: txHashes
func (_m *MockSharedDaemonRpcClient[T, B]) GetTransactions(txHashes []string) ([]T, error) {
	ret := _m.Called(txHashes)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []T
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]T, error)); ok {
		return rf(txHashes)
	}
	if rf, ok := ret.Get(0).(func([]string) []T); ok {
		r0 = rf(txHashes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(txHashes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockSharedDaemonRpcClient creates a new instance of MockSharedDaemonRpcClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSharedDaemonRpcClient[T SharedTx, B SharedBlock](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSharedDaemonRpcClient[T, B] {
	mock := &MockSharedDaemonRpcClient[T, B]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
